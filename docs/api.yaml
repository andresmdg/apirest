openapi: 3.0.3
info:
  title: Fastify Users API
  version: 1.0.0
  description: >
    A simple REST API built with Fastify and TypeScript.  
    Provides CRUD operations for a `users` collection (stored in memory).  

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /:
    get:
      summary: Health check
      description: Verify that the server is running.
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              example:
                success: true
                message: Server works

  /users:
    get:
      summary: List all users
      description: Retrieve all users from the in-memory collection.
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - id: 1
                  name: Alice
                  email: alice@example.com

    post:
      summary: Create a new user
      description: Add a user to the collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            example:
              name: Alice
              email: alice@example.com
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              description: URL of the created resource
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                name: Alice
                email: alice@example.com
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Email already registered

  /users/{id}:
    delete:
      summary: Delete a user by ID
      description: Remove a user from the collection.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  deleted:
                    $ref: '#/components/schemas/User'
              example:
                success: true
                deleted:
                  id: 1
                  name: Alice
                  email: alice@example.com
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: User not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Alice
        email:
          type: string
          example: alice@example.com

    UserInput:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: Alice
        email:
          type: string
          format: email
          example: alice@example.com
      required:
        - name
        - email

    Error:
      type: object
      properties:
        error:
          type: string
      example:
        error: Something went wrong
