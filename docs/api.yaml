openapi: 3.1.0
info:
  title: Fastify JSON API
  version: 1.0.0
  description: |
    Minimal REST API built with Fastify using a JSON file as a data store.
    Currently exposes the **users** resource.

servers:
  - url: http://localhost:{port}
    description: Local server
    variables:
      port:
        default: '205'
        description: Port where the server is listening

tags:
  - name: Health
  - name: Users

paths:
  /:
    get:
      tags: [Health]
      summary: Health check
      operationId: getHealth
      responses:
        '200':
          description: Service is running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              examples:
                ok:
                  value:
                    success: true
                    message: Server works
        '500':
          $ref: '#/components/responses/Error500'

  /users:
    get:
      tags: [Users]
      summary: List users
      operationId: listUsers
      responses:
        '200':
          description: Array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    - id: 1
                      name: Kevin
                      email: kevin@email.com
        '404':
          $ref: '#/components/responses/Error404'
        '500':
          $ref: '#/components/responses/Error500'

    post:
      tags: [Users]
      summary: Create user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
            examples:
              ok:
                value:
                  name: Ada Lovelace
                  email: ada@computing.org
      responses:
        '201':
          description: User created
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                created:
                  value:
                    id: 2
                    name: Ada Lovelace
                    email: ada@computing.org
        '400':
          $ref: '#/components/responses/Error400'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                conflict:
                  value:
                    error: Email already registered
        '404':
          $ref: '#/components/responses/Error404'
        '500':
          $ref: '#/components/responses/Error500'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Numeric identifier of the user
        schema:
          type: integer
          minimum: 1
    get:
      tags: [Users]
      summary: Get user by id
      operationId: getUserById
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    id: 1
                    name: Kevin
                    email: kevin@email.com
        '404':
          $ref: '#/components/responses/Error404'
        '500':
          $ref: '#/components/responses/Error500'

    delete:
      tags: [Users]
      summary: Delete user by id
      operationId: deleteUser
      responses:
        '200':
          description: Deleted user payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedUserResponse'
              examples:
                deleted:
                  value:
                    success: true
                    deleted:
                      id: 2
                      name: Ada Lovelace
                      email: ada@computing.org
        '404':
          $ref: '#/components/responses/Error404'
        '500':
          $ref: '#/components/responses/Error500'

components:
  headers:
    Location:
      description: URI of the created resource
      schema:
        type: string
        example: /users/2

  schemas:
    HealthResponse:
      type: object
      required: [success, message]
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Server works

    User:
      type: object
      additionalProperties: false
      required: [id, name, email]
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Kevin
        email:
          type: string
          format: email
          example: kevin@email.com

    NewUser:
      type: object
      additionalProperties: false
      required: [name, email]
      properties:
        name:
          type: string
          minLength: 1
          example: Ada Lovelace
        email:
          type: string
          format: email
          example: ada@computing.org

    DeletedUserResponse:
      type: object
      required: [success, deleted]
      properties:
        success:
          type: boolean
          example: true
        deleted:
          $ref: '#/components/schemas/User'

    Error:
      type: object
      required: [error]
      properties:
        error:
          type: string
          example: Data not found

  responses:
    Error400:
      description: Bad request (validation failed)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            badRequest:
              value:
                error: Invalid body
    Error404:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            notFound:
              value:
                error: Data not found
    Error500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            internal:
              value:
                error: An error has occurred
